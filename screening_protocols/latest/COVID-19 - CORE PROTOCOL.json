{
 "name": "COVID-19 - CORE PROTOCOL",
 "id": "d1babe83-77dd-4b10-a7fe-3b38057f7318",
 "scenario_trigger": "covid19_core",
 "description": "The CORE CDC COVID-19 Protocol",
 "active": true,
 "updated": "2020-06-08T13:56:48.1330000Z",
 "userDisplayName": "White, Peter M. (CDC/OCOO/OCIO)",
 "code": "{\"version\":3,\"steps\":[{\"id\":\"1dfffc1ca005-a002808a4d6c6265-1df8\",\"type\":\"assignVariable\",\"designer\":{\"xLocation\":1487,\"yLocation\":20,\"next\":\"6c24f1f1d714-cb25977852676488-20d6\"},\"scope\":\"scenario\",\"operation\":\"set\",\"variable\":\"version\",\"value\":\"61\"},{\"id\":\"7eef451e2b1f-933e216491b678ee-b493\",\"type\":\"action\",\"label\":\"Symptoms\",\"designer\":{\"xLocation\":1491,\"yLocation\":220,\"next\":\"b181a58bee11-863da5a06832f8b7-6729\"},\"onInit\":\"const dict = scenario.dictionary\\n\\nconst symptom_lists = {\\n  COV_symptoms: {\\n    lookup: 'covid_symptoms',\\n    indices: [],\\n    text: [\\n      'fever',\\n      'cough',\\n      'mild_mod_breathing',\\n      'sore_throat',\\n      'muscle_aches',\\n      'vomiting',\\n      'new_loss_taste_smell',\\n      'other_symptoms'\\n    ]\\n  },\\n\\n  comorbidity: {\\n    lookup: 'comorbidity',\\n    indices: [],\\n    text: [\\n      'chronic_lung',\\n      'serious_heart',\\n      'weak_immune',\\n      'severe_obesity',\\n      'underlying_conditions',\\n      'pregnancy',\\n      'none_of_above'\\n    ]\\n  }\\n}\\n\\nfor (const list in symptom_lists) {\\n    const symptom = symptom_lists[list]\\n    symptom.text = symptom.text.map((text, i) => {\\n        symptom.indices[i] = scenario.index_lookup[symptom.lookup][text]\\n        return dict[symptom.lookup][text]\\n    })\\n}\\n\\nscenario.symptom_lists = symptom_lists\"},{\"id\":\"6d302512bf1b-90847ec75bf46542-ec52\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":1360,\"yLocation\":1214,\"listStyle\":3,\"next\":\"f30af41c6b88-8e3d6f9c2435bd8f-67e0\"},\"text\":\"scenario.questions.is_ill_question\",\"variable\":\"is_ill\",\"stringId\":\"stringId_4f308701225c9af7\",\"choiceType\":\"choice\",\"label\":\"ILL\"},{\"id\":\"dfc0e87b51ad-db48170c06d27397-bca2\",\"type\":\"statement\",\"designer\":{\"xLocation\":1594,\"yLocation\":920},\"text\":\"scenario.messages.msg4\",\"stringId\":\"stringId_ef452c64222b74c1\",\"label\":\"MSG 4\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 4\\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"43e0724ff748-08e8e63e80e659e0-d226\",\"type\":\"prompt\",\"dataType\":\"object\",\"designer\":{\"xLocation\":1372,\"yLocation\":749,\"next\":\"73efa88fc0e3-7ade266e1640ef25-cc8d\"},\"text\":\"scenario.questions.age_question\",\"variable\":\"age_choice\",\"stringId\":\"stringId_59823cf48d85aa1d\",\"label\":\"Age\",\"layout\":\"vertical\",\"attachment\":[{\"type\":\"AdaptiveCard\",\"cardCode\":\"{\\n\\t\\\"$schema\\\": \\\"http://adaptivecards.io/schemas/adaptive-card.json\\\",\\n\\t\\\"type\\\": \\\"AdaptiveCard\\\",\\n\\t\\\"version\\\": \\\"1.0\\\",\\n\\t\\\"body\\\": [\\n\\n\\t\\t{\\n\\t\\t\\t\\\"type\\\": \\\"Input.ChoiceSet\\\",\\n\\t\\t\\t\\\"id\\\": \\\"choice\\\",\\n\\t\\t\\t\\\"style\\\": \\\"compact\\\",\\n\\t\\t\\t\\\"value\\\": \\\"default_message\\\",\\n\\t\\t\\t\\\"choices\\\": scenario.dictionary.age_dropdown_list\\n\\t\\t}\\n\\t],\\n\\t\\\"actions\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"type\\\": \\\"Action.Submit\\\",\\n\\t\\t\\t\\\"title\\\": scenario.dictionary.submit_button,\\n\\t\\t}\\n\\t]\\n}\"}]},{\"id\":\"785747110df4-215c0057004e2a60-1be6\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_idk_response\",\"designer\":{\"xLocation\":1800,\"yLocation\":1580,\"listStyle\":3,\"next\":\"b37f9d018b9b-8d0b0e8f0542748a-0734\"},\"text\":\"scenario.questions.exposure_question\",\"variable\":\"cov19_contact\",\"label\":\"EXPO\",\"stringId\":\"stringId_4e21946a5da61d66\",\"choiceType\":\"choice\"},{\"id\":\"e845d3fd54fd-68ce779944257441-6bd3\",\"type\":\"branch\",\"condition\":\"scenario.cov19_contact.index !== 1\",\"designer\":{\"xLocation\":1511,\"yLocation\":2065,\"reverse\":true,\"next\":\"b2c1f7dba02d-0a63a7e863134977-9a69\"},\"label\":\"EXPO\",\"targetStepId\":\"d803d9623378-2b3d198ff538ecc2-77d2\"},{\"id\":\"b37f9d018b9b-8d0b0e8f0542748a-0734\",\"type\":\"prompt\",\"dataType\":\"scenario.symptom_lists.COV_symptoms.text\",\"designer\":{\"xLocation\":1800,\"yLocation\":1640,\"listStyle\":5,\"next\":\"1ad2a52aa935-fe845385ecf03f4f-e110\"},\"text\":\"scenario.questions.check_box_question\",\"variable\":\"covid_symptoms\",\"stringId\":\"stringId_81df34eb5ca345f8\",\"choiceType\":\"multi-choice\",\"label\":\"COV SYM\",\"submitTitle\":\"scenario.dictionary.submit_button\"},{\"id\":\"d803d9623378-2b3d198ff538ecc2-77d2\",\"type\":\"branch\",\"condition\":\"// check if they have selected cough, fever, or mild or moderate difficulty breathing\\nscenario.covid_symptoms.filter(item => [0, 1, 2].includes(item.index)).length > 0\",\"designer\":{\"xLocation\":900,\"yLocation\":2392,\"reverse\":true,\"next\":\"faf265f6cffc-22852bbec8b9acd3-cc05\"},\"label\":\"PRI COV\",\"targetStepId\":\"542ebf62d5a4-dc37cc428b8f35f2-25d8\"},{\"id\":\"542ebf62d5a4-dc37cc428b8f35f2-25d8\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":555,\"yLocation\":2540,\"listStyle\":3,\"next\":\"0a4995cfd913-d267af9adb780b52-d3a6\"},\"text\":\"scenario.questions.ltcf_question\",\"variable\":\"nursing_home\",\"stringId\":\"stringId_207ee4cdd1e0186c\",\"choiceType\":\"choice\",\"label\":\"LTCF\"},{\"id\":\"0a4995cfd913-d267af9adb780b52-d3a6\",\"type\":\"branch\",\"condition\":\"scenario.nursing_home.index == 0\",\"designer\":{\"xLocation\":555,\"yLocation\":2620,\"next\":\"870f74d0ff4e-2333ad8fdfa5d2ba-514c\"},\"targetStepId\":\"d11e09e6ca63-45491e4d834c924c-fbd4\",\"label\":\"LTCF\"},{\"id\":\"5c50811ee2a7-b3b0aab1e37fc102-0107\",\"type\":\"statement\",\"designer\":{\"xLocation\":740,\"yLocation\":3551},\"text\":\"scenario.messages.msg7\",\"stringId\":\"stringId_70dd59cab4ae54a6\",\"label\":\"MSG 7\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 7   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"870f74d0ff4e-2333ad8fdfa5d2ba-514c\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":415,\"yLocation\":2720,\"listStyle\":3,\"next\":\"a79c8ef42b66-128aa4a8ae7959d0-2843\"},\"text\":\"scenario.questions.hcf_question\",\"variable\":\"healthcare_facility\",\"stringId\":\"stringId_d619c6efdfa5f78f\",\"choiceType\":\"choice\",\"label\":\"HCF\"},{\"id\":\"a79c8ef42b66-128aa4a8ae7959d0-2843\",\"type\":\"branch\",\"condition\":\"scenario.healthcare_facility.index == 0\",\"designer\":{\"xLocation\":415,\"yLocation\":2791,\"next\":\"414c8ce63048-5e86b5328256eaa0-ffe5\",\"reverse\":true},\"targetStepId\":\"630179408ae4-a39be06855eb07c7-0112\",\"label\":\"HCF\"},{\"id\":\"af9414f537a7-c161ec835caa7041-612b\",\"type\":\"statement\",\"designer\":{\"xLocation\":189,\"yLocation\":3606,\"next\":\"774bcad9587c-5dde0d7b5fccd7db-689e\"},\"text\":\"scenario.messages.msg6\",\"stringId\":\"stringId_3158d563b01a12c3\",\"label\":\"MSG 6\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 6  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"3d0858a70b5c-a489a5ab3e787e10-b6d2\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":3380,\"yLocation\":2528,\"listStyle\":3,\"next\":\"a3c40408e68e-2cbd1d41ac50246f-3f32\"},\"text\":\"scenario.questions.ltcf_question\",\"variable\":\"nursing_home\",\"stringId\":\"stringId_712d7f1a7a74d23c\",\"choiceType\":\"choice\",\"label\":\"LTCF\"},{\"id\":\"a3c40408e68e-2cbd1d41ac50246f-3f32\",\"type\":\"branch\",\"condition\":\"scenario.nursing_home.index == 0\",\"designer\":{\"xLocation\":3380,\"yLocation\":2600,\"next\":\"acb093cc2a04-a1e0edaedae3c307-825d\"},\"targetStepId\":\"01a78be15af1-e293c18d1693e7b2-daef\",\"label\":\"LTCF\"},{\"id\":\"38a461e086f7-cc03c9068c518cfb-6bbe\",\"type\":\"statement\",\"designer\":{\"xLocation\":3613,\"yLocation\":3540},\"text\":\"scenario.messages.msg7\",\"stringId\":\"stringId_1b450e49445e1e89\",\"label\":\"MSG 7\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 7   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"acb093cc2a04-a1e0edaedae3c307-825d\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":3266,\"yLocation\":2700,\"listStyle\":3,\"next\":\"c938a93b1329-1bb58f9f76f339e1-e154\"},\"text\":\"scenario.questions.hcf_question\",\"variable\":\"healthcare_facility\",\"stringId\":\"stringId_7bc298138f621a0e\",\"choiceType\":\"choice\",\"label\":\"HCF\"},{\"id\":\"2b857538b615-fad6e8224dcf52bc-523d\",\"type\":\"prompt\",\"dataType\":\"scenario.symptom_lists.comorbidity.text\",\"designer\":{\"xLocation\":3331,\"yLocation\":2911,\"listStyle\":5,\"next\":\"a6442bfd0a5a-471b3aace3a7abd2-bb3d\"},\"text\":\"scenario.questions.risk_factor_question\\n\",\"variable\":\"risk_factors\",\"label\":\"Risk factors\",\"stringId\":\"stringId_3f00cfb088197741\",\"choiceType\":\"multi-choice\",\"submitTitle\":\"scenario.dictionary.submit_button\"},{\"id\":\"54a1c2b4fe8d-d01f54c301a07549-c6e5\",\"type\":\"branch\",\"condition\":\"scenario.risk_factors.length !== 1 || scenario.risk_factors[0].index !== (scenario.symptom_lists.comorbidity.text.length - 1)\",\"designer\":{\"xLocation\":3260,\"yLocation\":3160,\"reverse\":true,\"next\":\"810c09e3ee8d-f9bfbf12c15b0689-2ec4\"},\"label\":\"RISK\",\"targetStepId\":\"2b1dc45b8f98-d6e22bd29cfa66a1-0040\"},{\"id\":\"d3e716843984-55078f6a8c32df09-19ad\",\"type\":\"statement\",\"designer\":{\"xLocation\":3073,\"yLocation\":3607,\"next\":\"3503dd49eb60-5736a207bcc8b4cd-3292\"},\"text\":\"scenario.messages.msg6\",\"stringId\":\"stringId_6c46370dbaf61d63\",\"label\":\"MSG 6\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 6  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"eb31b2c11479-6f3ac6eae56eba73-b437\",\"type\":\"statement\",\"designer\":{\"xLocation\":3070,\"yLocation\":3551,\"next\":\"d3e716843984-55078f6a8c32df09-19ad\"},\"text\":\"scenario.messages.msg9\",\"stringId\":\"stringId_05ed5b546a0c96c2\",\"label\":\"MSG 9\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 9\\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"9585ad505092-b7a594ac89f7fe4e-998f\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":2640,\"yLocation\":2520,\"listStyle\":3,\"next\":\"3c0351a9073a-fc6fd7372d27d434-4f63\"},\"text\":\"scenario.questions.ltcf_question\",\"variable\":\"nursing_home\",\"stringId\":\"stringId_4cfc85c5c834bb0e\",\"choiceType\":\"choice\",\"label\":\"LTCF\"},{\"id\":\"3c0351a9073a-fc6fd7372d27d434-4f63\",\"type\":\"branch\",\"condition\":\"scenario.nursing_home.index == 0\",\"designer\":{\"xLocation\":2647,\"yLocation\":2587,\"next\":\"076068457e91-9e045d523ccd15e8-4256\",\"reverse\":true},\"targetStepId\":\"324cb0d50daf-a1b7b7544a1eb2fa-ca5b\",\"label\":\"LTCF\"},{\"id\":\"076068457e91-9e045d523ccd15e8-4256\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":2693,\"yLocation\":2769,\"listStyle\":3,\"next\":\"077168a10fd7-ec6a70e008d717fe-c93b\"},\"text\":\"scenario.questions.hcf_question\",\"variable\":\"healthcare_facility\",\"stringId\":\"stringId_300dc6cdf7a56a33\",\"choiceType\":\"choice\",\"label\":\"HCF\"},{\"id\":\"077168a10fd7-ec6a70e008d717fe-c93b\",\"type\":\"branch\",\"condition\":\"scenario.healthcare_facility.index == 0\",\"designer\":{\"xLocation\":2700,\"yLocation\":2860,\"next\":\"4aa658a0b628-8416967ef881fb2c-6bee\",\"reverse\":true},\"targetStepId\":\"64777325f7ac-b0a0a9b16e05514e-eee4\",\"label\":\"HCF\"},{\"id\":\"9d9080dc9744-ce645812f47d91a2-4314\",\"type\":\"statement\",\"designer\":{\"xLocation\":2600,\"yLocation\":3560,\"next\":\"926a696c9fa6-26d4419d59c7c7f2-926b\"},\"text\":\"scenario.messages.msg5\",\"stringId\":\"stringId_05ed5b546a0c96c2\",\"label\":\"MSG 5\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 5 \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"517f17d75e79-8f4a8818358989f5-36e8\",\"type\":\"statement\",\"designer\":{\"xLocation\":2487,\"yLocation\":3565,\"next\":\"14463dbdd18a-023bfb17ddf420e5-8bb8\"},\"text\":\"scenario.messages.msg8\",\"stringId\":\"stringId_4647a1ae092cb747\",\"label\":\"MSG 8\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 8   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"14463dbdd18a-023bfb17ddf420e5-8bb8\",\"type\":\"statement\",\"designer\":{\"xLocation\":2487,\"yLocation\":3626,\"next\":\"1aee8fc7a32b-e03f1c277b079f40-c61c\"},\"text\":\"scenario.messages.msg6\",\"stringId\":\"stringId_56f70007a72140ac\",\"label\":\"MSG 6\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 6  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"cc8d764e6d19-364d6f8c3f237b15-f6c3\",\"type\":\"statement\",\"designer\":{\"xLocation\":189,\"yLocation\":3535,\"next\":\"af9414f537a7-c161ec835caa7041-612b\"},\"text\":\"scenario.messages.msg9\",\"stringId\":\"stringId_e214b3eb992e4908\",\"label\":\"MSG 9\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 9  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"3d52630ed572-62b32efeaa3f5d33-618c\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.who_for_response\",\"designer\":{\"xLocation\":1488,\"yLocation\":460,\"listStyle\":3,\"next\":\"3ff7a441ad34-c612c94dd7e9939f-80ba\"},\"text\":\"scenario.dictionary.other_questions.who_for_question\",\"variable\":\"who_for\",\"stringId\":\"stringId_fb0dc13dc7545ef8\",\"choiceType\":\"choice\",\"label\":\"Who?\"},{\"id\":\"59b4208a606e-223fffc90059907b-c78a\",\"type\":\"action\",\"label\":\"Custom MSG\",\"designer\":{\"xLocation\":1494,\"yLocation\":380,\"next\":\"3d52630ed572-62b32efeaa3f5d33-618c\"},\"onInit\":\"/********** \\nAdd a custom message that will clinical disposition outcome that are displayed to the user.\\nSet the value to a static string or build it dynamically based on user responses. \\n \\nscenario.custom_message = \\\"My Healthcare Organizations Custom Message\\\";\\n\\nYou can choose to display the message from the wrapping scenario \\nby setting show_core_message to false in the wrapping scenario.\\n**********/ \\n\\n\\nscenario.show_message = scenario.scenarioArgs.show_core_message\\nscenario.custom_message = scenario.scenarioArgs.custom_outcome_message || \\\"\\\"\\n\\n// Add custom message to scenario outcomes\\nscenario.messages.msg0 += scenario.custom_message\\nscenario.messages.msg1 += scenario.custom_message\\nscenario.messages.msg5 += scenario.custom_message\\nscenario.messages.msg7 += scenario.custom_message\\nscenario.messages.msg8 += scenario.custom_message\\nscenario.messages.msg9 += scenario.custom_message\\nscenario.messages.msg9a += scenario.custom_message\\nscenario.messages.msg10 += scenario.custom_message\\nscenario.messages.msg15 += scenario.custom_message\\nscenario.messages.msg17 += scenario.custom_message\\nscenario.messages.msg18 += scenario.custom_message\"},{\"id\":\"753fcda3042c-34874f085149a441-202a\",\"type\":\"statement\",\"designer\":{\"xLocation\":880,\"yLocation\":3560,\"next\":\"301ce3345c27-5b97460f5ab70f72-de17\"},\"text\":\"scenario.messages.msg8\",\"stringId\":\"stringId_879abff2f31f5213\",\"label\":\"MSG 8\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 8  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"e89609c80709-2801ccb7086470e6-fe47\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.gender_response\",\"designer\":{\"xLocation\":1800,\"yLocation\":1420,\"listStyle\":3,\"next\":\"34c2a7f807a3-920d1f619990a213-7bcf\"},\"text\":\"scenario.questions.gender_question\",\"variable\":\"gender\",\"label\":\"Gender\",\"stringId\":\"stringId_d91e84995f31cf39\",\"choiceType\":\"choice\"},{\"id\":\"33b1596c59b0-2ba178906bb14cfd-b16f\",\"type\":\"branch\",\"condition\":\"scenario.age.index === 12\",\"designer\":{\"xLocation\":1460,\"yLocation\":1060,\"reverse\":false,\"next\":\"6d302512bf1b-90847ec75bf46542-ec52\"},\"label\":\"< 18\",\"targetStepId\":\"e7538c5f2f64-5b74292356d5d5ff-3701\"},{\"id\":\"6b922f1f04b6-9d2caacb98e5626f-15e4\",\"type\":\"statement\",\"designer\":{\"xLocation\":3332,\"yLocation\":3540,\"next\":\"e8856bcbed8c-8f1313d0491026e6-e307\"},\"text\":\"scenario.messages.msg8\",\"stringId\":\"stringId_a08a31d9a163fb20\",\"label\":\"MSG 8\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 8   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"6b2cdf4ecac0-d0428f2388050853-14e8\",\"type\":\"statement\",\"designer\":{\"xLocation\":3189,\"yLocation\":3549,\"next\":\"c5a6fb5535d7-9440600e87e60a22-1f38\"},\"text\":\"scenario.messages.msg9\",\"stringId\":\"stringId_bbb7235a458f37df\",\"label\":\"MSG 9\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 9  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"4aa658a0b628-8416967ef881fb2c-6bee\",\"type\":\"prompt\",\"dataType\":\"scenario.symptom_lists.comorbidity.text\",\"designer\":{\"xLocation\":2780,\"yLocation\":3000,\"listStyle\":5,\"next\":\"72778cd0486b-3f746ec81ac2e463-66fe\"},\"text\":\"scenario.questions.risk_factor_question\",\"variable\":\"risk_factors\",\"label\":\"Risk factors\",\"stringId\":\"stringId_7dca709c895caeb0\",\"choiceType\":\"multi-choice\",\"submitTitle\":\"scenario.dictionary.submit_button\"},{\"id\":\"414c8ce63048-5e86b5328256eaa0-ffe5\",\"type\":\"prompt\",\"dataType\":\"scenario.symptom_lists.comorbidity.text\",\"designer\":{\"xLocation\":520,\"yLocation\":2887,\"listStyle\":5,\"next\":\"df76c2b8dace-f7e4549f7b9d4a55-5428\"},\"text\":\"scenario.questions.risk_factor_question\",\"variable\":\"risk_factors\",\"label\":\"Risk factors\",\"stringId\":\"stringId_5249e2e4e19f9654\",\"choiceType\":\"multi-choice\",\"submitTitle\":\"scenario.dictionary.submit_button\"},{\"id\":\"45380301e33b-9f7859bb2d3aa118-bf89\",\"type\":\"branch\",\"condition\":\"scenario.nursing_home.index == 0\",\"designer\":{\"xLocation\":1089,\"yLocation\":2660,\"next\":\"a0c37abd7107-f55f539749b5a7ec-d1e1\",\"reverse\":true},\"targetStepId\":\"d11e09e6ca63-45491e4d834c924c-fbd4\",\"label\":\"LTCF\"},{\"id\":\"a0c37abd7107-f55f539749b5a7ec-d1e1\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":1140,\"yLocation\":2774,\"listStyle\":3,\"next\":\"03fba90d344e-49680bb08c05576c-865f\"},\"text\":\"scenario.questions.hcf_question\",\"variable\":\"healthcare_facility\",\"stringId\":\"stringId_6d7e9acbf75a3f64\",\"choiceType\":\"choice\",\"label\":\"HCF\"},{\"id\":\"03fba90d344e-49680bb08c05576c-865f\",\"type\":\"branch\",\"condition\":\"scenario.healthcare_facility.index == 0\",\"designer\":{\"xLocation\":1148,\"yLocation\":2840,\"next\":\"59e44f5c0f76-992c44eb9cc4889a-69eb\",\"reverse\":true},\"targetStepId\":\"530fbe9c9d90-7cfe3c6339c748ee-cd53\",\"label\":\"HCF\"},{\"id\":\"59e44f5c0f76-992c44eb9cc4889a-69eb\",\"type\":\"prompt\",\"dataType\":\"scenario.symptom_lists.comorbidity.text\",\"designer\":{\"xLocation\":1220,\"yLocation\":2927,\"listStyle\":5,\"next\":\"562bf1acad1f-4c391d654886d036-1996\"},\"text\":\"scenario.questions.risk_factor_question\",\"variable\":\"risk_factors\",\"label\":\"Risk factors\",\"stringId\":\"stringId_b13dd78cb5c76e1c\",\"choiceType\":\"multi-choice\",\"submitTitle\":\"scenario.dictionary.submit_button\"},{\"id\":\"3a43e2e90099-680acb2936b9b8c7-36dd\",\"type\":\"statement\",\"designer\":{\"xLocation\":1885,\"yLocation\":1700,\"next\":\"b37f9d018b9b-8d0b0e8f0542748a-0734\"},\"text\":\"scenario.messages.continue_msg\",\"stringId\":\"stringId_fc98c4c88c8a482c\",\"label\":\"CONT\"},{\"id\":\"1ceaa541b28f-1907213396563ec6-733d\",\"type\":\"branch\",\"condition\":\"scenario.covid_symptoms.length == 0\",\"designer\":{\"xLocation\":1810,\"yLocation\":1767,\"reverse\":false,\"next\":\"e845d3fd54fd-68ce779944257441-6bd3\"},\"label\":\"0 SEL\",\"targetStepId\":\"65c709a766b7-9a7eb514e4045029-1c69\"},{\"id\":\"573f09484e35-6d1c0847d574d4be-fbaf\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":1086,\"yLocation\":2580,\"listStyle\":3,\"next\":\"45380301e33b-9f7859bb2d3aa118-bf89\"},\"text\":\"scenario.questions.ltcf_question\",\"variable\":\"nursing_home\",\"stringId\":\"stringId_ec8f2bd59a986db4\",\"choiceType\":\"choice\",\"label\":\"LTCF\"},{\"id\":\"1ad2a52aa935-fe845385ecf03f4f-e110\",\"type\":\"assignVariable\",\"designer\":{\"xLocation\":1800,\"yLocation\":1700,\"next\":\"1ceaa541b28f-1907213396563ec6-733d\"},\"scope\":\"scenario\",\"operation\":\"incrementBy\",\"variable\":\"prompt_count\",\"value\":\"1\"},{\"id\":\"c1c2fa364bff-d94120977cf60cbc-3f96\",\"type\":\"branch\",\"condition\":\"scenario.risk_factors.length == 0\",\"designer\":{\"xLocation\":529,\"yLocation\":3020,\"reverse\":false,\"next\":\"33c556a2ed13-bb76cadefa8cb559-964e\"},\"label\":\"0 sel\",\"targetStepId\":\"1884861f09d1-b4b19c053d5669f3-03d0\"},{\"id\":\"df84c0f795f0-515f75ada9045d16-90f6\",\"type\":\"statement\",\"designer\":{\"xLocation\":607,\"yLocation\":2952,\"next\":\"414c8ce63048-5e86b5328256eaa0-ffe5\"},\"text\":\"scenario.messages.continue_msg\",\"stringId\":\"stringId_a8892197bb1c5404\",\"label\":\"CONT\"},{\"id\":\"27648d4d3ae9-5f21c5582970b026-45ed\",\"type\":\"statement\",\"designer\":{\"xLocation\":1307,\"yLocation\":2994,\"next\":\"59e44f5c0f76-992c44eb9cc4889a-69eb\"},\"text\":\"scenario.messages.continue_msg\",\"stringId\":\"stringId_b9b88592d22b2507\",\"label\":\"CONT\"},{\"id\":\"5458c6351a5a-8b97732d51c54fef-313a\",\"type\":\"branch\",\"condition\":\"scenario.risk_factors.length == 0\",\"designer\":{\"xLocation\":1230,\"yLocation\":3087,\"reverse\":false,\"next\":\"3d4515dc0f10-0ccf9e41a1b34a16-30a3\"},\"label\":\"0 sel\",\"targetStepId\":\"0eb8e349c997-c5143af27d1feaa5-e26b\"},{\"id\":\"cf47dd4aaaaf-df0d07f7b8cbb5dc-50cc\",\"type\":\"branch\",\"condition\":\"scenario.risk_factors.length == 0\",\"designer\":{\"xLocation\":2793,\"yLocation\":3120,\"reverse\":false,\"next\":\"5bff4692086d-a8c8e97f0b581855-21f2\"},\"label\":\"0 sel\",\"targetStepId\":\"fa98d847e0ac-43e5b0bce5271285-6c14\"},{\"id\":\"f358805ad2c8-15e53f8e31dbe7ca-ed17\",\"type\":\"statement\",\"designer\":{\"xLocation\":2873,\"yLocation\":3060,\"next\":\"4aa658a0b628-8416967ef881fb2c-6bee\"},\"text\":\"scenario.messages.continue_msg\",\"stringId\":\"stringId_0c0afce0a9e70a68\",\"label\":\"CONT\"},{\"id\":\"6b24b77c219e-d53a6dd72ef8c228-aac7\",\"type\":\"statement\",\"designer\":{\"xLocation\":3420,\"yLocation\":2971,\"next\":\"2b857538b615-fad6e8224dcf52bc-523d\"},\"text\":\"scenario.messages.continue_msg\",\"stringId\":\"stringId_e05a0d21fcf4b8d8\",\"label\":\"CONT\"},{\"id\":\"8c49c3f10ebb-85e593f9527fc642-ff7f\",\"type\":\"branch\",\"condition\":\"scenario.risk_factors.length == 0\",\"designer\":{\"xLocation\":3340,\"yLocation\":3051,\"reverse\":false,\"next\":\"54a1c2b4fe8d-d01f54c301a07549-c6e5\"},\"label\":\"0 sel\",\"targetStepId\":\"2c42aad10e7a-7c0abaa404d873c2-712d\"},{\"id\":\"65c709a766b7-9a7eb514e4045029-1c69\",\"type\":\"branch\",\"condition\":\"scenario.prompt_count > 2\",\"designer\":{\"xLocation\":1867,\"yLocation\":1820,\"next\":\"3a43e2e90099-680acb2936b9b8c7-36dd\",\"reverse\":false},\"label\":\"CNT > 3\",\"targetStepId\":\"88c4e04d3104-7308b12280ada799-d3b8\"},{\"id\":\"42c9a3e45475-5ac6bae29aa09197-403e\",\"type\":\"statement\",\"designer\":{\"xLocation\":1927,\"yLocation\":2080},\"text\":\"scenario.messages.msg0\",\"stringId\":\"stringId_8044c8a964a344b5\",\"label\":\"MSG 0\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 0   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"33c556a2ed13-bb76cadefa8cb559-964e\",\"type\":\"branch\",\"condition\":\"scenario.risk_factors.length !== 1 || scenario.risk_factors[0].index !== (scenario.symptom_lists.comorbidity.text.length - 1)\",\"designer\":{\"xLocation\":440,\"yLocation\":3140,\"next\":\"1ebb9a45e081-1eca03815ea2c0f2-bc1d\",\"reverse\":true},\"label\":\"RISK\",\"targetStepId\":\"400dfc442f20-c155be96322b2a5e-09e1\"},{\"id\":\"1ad03c4a8891-7486b59aa78864c7-b03b\",\"type\":\"statement\",\"designer\":{\"xLocation\":389,\"yLocation\":3540,\"next\":\"522c0ec833f2-0fa01b87b00be42f-2c9a\"},\"text\":\"scenario.messages.msg8\",\"stringId\":\"stringId_49bfd215cdf83e81\",\"label\":\"MSG 8\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 8   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"345a28beada8-a43221b4a9d92f10-4380\",\"type\":\"statement\",\"designer\":{\"xLocation\":289,\"yLocation\":3540,\"next\":\"ab10559e2f69-a86d1f69931d9810-0a31\"},\"text\":\"scenario.messages.msg5\",\"stringId\":\"stringId_1cf025b039f43959\",\"label\":\"MSG 5\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 5  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"df76c2b8dace-f7e4549f7b9d4a55-5428\",\"type\":\"assignVariable\",\"designer\":{\"xLocation\":520,\"yLocation\":2952,\"next\":\"c1c2fa364bff-d94120977cf60cbc-3f96\"},\"scope\":\"scenario\",\"operation\":\"incrementBy\",\"variable\":\"prompt_count_risk\",\"value\":\"1\"},{\"id\":\"1884861f09d1-b4b19c053d5669f3-03d0\",\"type\":\"branch\",\"condition\":\"scenario.prompt_count_risk > 2\",\"designer\":{\"xLocation\":605,\"yLocation\":3075,\"next\":\"df84c0f795f0-515f75ada9045d16-90f6\",\"reverse\":false},\"label\":\"CNT > 3\",\"targetStepId\":\"fba7e05cf3a0-a7293c1416745eca-e9e0\"},{\"id\":\"18c1d760c40f-af4400e0fa0b76bc-891d\",\"type\":\"statement\",\"designer\":{\"xLocation\":640,\"yLocation\":3551},\"text\":\"scenario.messages.msg0\",\"stringId\":\"stringId_8044c8a964a344b5\",\"label\":\"MSG 0\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 0   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"562bf1acad1f-4c391d654886d036-1996\",\"type\":\"assignVariable\",\"designer\":{\"xLocation\":1220,\"yLocation\":2991,\"next\":\"5458c6351a5a-8b97732d51c54fef-313a\"},\"scope\":\"scenario\",\"operation\":\"incrementBy\",\"variable\":\"prompt_count_risk\",\"value\":\"1\"},{\"id\":\"0eb8e349c997-c5143af27d1feaa5-e26b\",\"type\":\"branch\",\"condition\":\"scenario.prompt_count_risk > 2\",\"designer\":{\"xLocation\":1295,\"yLocation\":3147,\"reverse\":false,\"next\":\"27648d4d3ae9-5f21c5582970b026-45ed\"},\"label\":\"CNT > 3\",\"targetStepId\":\"4656af61998b-8b5ec1daf9185bfd-e1dc\"},{\"id\":\"e6a35ba7078a-cc440f896b14fbb4-b982\",\"type\":\"statement\",\"designer\":{\"xLocation\":1390,\"yLocation\":3567},\"text\":\"scenario.messages.msg0\",\"stringId\":\"stringId_8044c8a964a344b5\",\"label\":\"MSG 0\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 0   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"72778cd0486b-3f746ec81ac2e463-66fe\",\"type\":\"assignVariable\",\"designer\":{\"xLocation\":2780,\"yLocation\":3060,\"next\":\"cf47dd4aaaaf-df0d07f7b8cbb5dc-50cc\"},\"scope\":\"scenario\",\"operation\":\"incrementBy\",\"variable\":\"prompt_count_risk\",\"value\":\"1\"},{\"id\":\"fa98d847e0ac-43e5b0bce5271285-6c14\",\"type\":\"branch\",\"condition\":\"scenario.prompt_count_risk > 2\",\"designer\":{\"xLocation\":2860,\"yLocation\":3220,\"reverse\":false,\"next\":\"f358805ad2c8-15e53f8e31dbe7ca-ed17\"},\"label\":\"CNT > 3\",\"targetStepId\":\"9d88be7eeb74-b93730d79cd4fd0a-d6ea\"},{\"id\":\"2c42aad10e7a-7c0abaa404d873c2-712d\",\"type\":\"branch\",\"condition\":\"scenario.prompt_count_risk > 2\",\"designer\":{\"xLocation\":3420,\"yLocation\":3131,\"next\":\"6b24b77c219e-d53a6dd72ef8c228-aac7\",\"reverse\":false},\"label\":\"CNT > 3\",\"targetStepId\":\"9529191be6cb-9e9f158eaddeb03c-758f\"},{\"id\":\"a6442bfd0a5a-471b3aace3a7abd2-bb3d\",\"type\":\"assignVariable\",\"designer\":{\"xLocation\":3331,\"yLocation\":2971,\"next\":\"8c49c3f10ebb-85e593f9527fc642-ff7f\"},\"scope\":\"scenario\",\"operation\":\"incrementBy\",\"variable\":\"prompt_count_risk\",\"value\":\"1\"},{\"id\":\"b40edbcb8e70-dc2a03fa62964a90-6d07\",\"type\":\"statement\",\"designer\":{\"xLocation\":3473,\"yLocation\":3540},\"text\":\"scenario.messages.msg0\",\"stringId\":\"stringId_8044c8a964a344b5\",\"label\":\"MSG 0\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 0   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"bc51d1c84af2-d728490455496151-12d4\",\"type\":\"statement\",\"designer\":{\"xLocation\":2887,\"yLocation\":3560},\"text\":\"scenario.messages.msg0\",\"stringId\":\"stringId_8044c8a964a344b5\",\"label\":\"MSG 0\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 0   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"301ce3345c27-5b97460f5ab70f72-de17\",\"type\":\"statement\",\"designer\":{\"xLocation\":880,\"yLocation\":3633,\"next\":\"272ce9ca5a42-cc55a24b58bddacf-92f3\"},\"text\":\"scenario.messages.msg6\",\"stringId\":\"stringId_3158d563b01a12c3\",\"label\":\"MSG 6\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 6  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"272ce9ca5a42-cc55a24b58bddacf-92f3\",\"type\":\"statement\",\"designer\":{\"xLocation\":880,\"yLocation\":3705},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_48f596570a22a559\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t2\\\"\\n}\",\"label\":\"MSG T2\"},{\"id\":\"bac2deb4feac-262fa7d74cc56181-07a1\",\"type\":\"statement\",\"designer\":{\"xLocation\":1069,\"yLocation\":3560,\"next\":\"61f383748ef9-b37503c63ea182a3-b167\"},\"text\":\"scenario.messages.msg9\",\"stringId\":\"stringId_5cd7e90fc90c551c\",\"label\":\"MSG 9\",\"entity\":\"{ \\n  name: 'completion_event',\\n  message_id: 9   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"3d4515dc0f10-0ccf9e41a1b34a16-30a3\",\"type\":\"branch\",\"condition\":\"scenario.risk_factors.length !== 1 || scenario.risk_factors[0].index !== (scenario.symptom_lists.comorbidity.text.length - 1)\",\"designer\":{\"xLocation\":1135,\"yLocation\":3187,\"next\":\"7ec4d428edf4-fe2d87a82f49bd89-6b18\",\"reverse\":true},\"label\":\"RISK\",\"targetStepId\":\"71516eac92a7-6a32e83c1cfaaa6c-afe0\"},{\"id\":\"7ec4d428edf4-fe2d87a82f49bd89-6b18\",\"type\":\"branch\",\"condition\":\"[9,10,11].includes(scenario.age.index) \",\"designer\":{\"xLocation\":1209,\"yLocation\":3267,\"next\":\"22ad4e1b9b10-b6499d64e54f4cce-d5d3\",\"reverse\":true},\"label\":\"> 65\",\"targetStepId\":\"2809edaa4099-a87f0d4f6bb2a8e3-31c1\"},{\"id\":\"61f383748ef9-b37503c63ea182a3-b167\",\"type\":\"statement\",\"designer\":{\"xLocation\":1068,\"yLocation\":3640},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_48f596570a22a559\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 't2'\\n}\",\"label\":\"MSG T2\"},{\"id\":\"18c23789346f-947e740f03a875e8-ce20\",\"type\":\"statement\",\"designer\":{\"xLocation\":1270,\"yLocation\":3567,\"next\":\"49488c9f0be6-fae2700e29c3cc0b-78f5\"},\"text\":\"scenario.messages.msg8\",\"stringId\":\"stringId_49bfd215cdf83e81\",\"label\":\"MSG 8\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 8  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"774bcad9587c-5dde0d7b5fccd7db-689e\",\"type\":\"statement\",\"designer\":{\"xLocation\":189,\"yLocation\":3680},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_5b7c284122e3fdc5\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t2\\\"\\n}\",\"label\":\"MSG T2\"},{\"id\":\"ab10559e2f69-a86d1f69931d9810-0a31\",\"type\":\"statement\",\"designer\":{\"xLocation\":289,\"yLocation\":3620},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_ccd0003653a92c85\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t2\\\"\\n}\",\"label\":\"MSG T2\"},{\"id\":\"1ebb9a45e081-1eca03815ea2c0f2-bc1d\",\"type\":\"branch\",\"condition\":\"[9,10,11].includes(scenario.age.index) \",\"designer\":{\"xLocation\":480,\"yLocation\":3265,\"next\":\"9f2ce6d914e3-e5f3fb85440a85ff-36e3\",\"reverse\":false},\"label\":\"> 65\",\"targetStepId\":\"ad6b9490df2a-b67f2d01498fc80e-bf31\"},{\"id\":\"0730220ca29a-0278d37a0379001c-8889\",\"type\":\"statement\",\"designer\":{\"xLocation\":540,\"yLocation\":3551,\"next\":\"982e03485c3d-4912d15407d15aa8-1e4c\"},\"text\":\"scenario.messages.msg9\",\"stringId\":\"stringId_5cd7e90fc90c551c\",\"label\":\"MSG 9\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 9  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"982e03485c3d-4912d15407d15aa8-1e4c\",\"type\":\"statement\",\"designer\":{\"xLocation\":540,\"yLocation\":3611},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_9bde9b2463bc9fac\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t2\\\"\\n}\",\"label\":\"MSG T2\"},{\"id\":\"60c21cd4c525-3b87b161b61a52ca-053d\",\"type\":\"branch\",\"condition\":\"// check if they have selected cough, fever, or mild or moderate difficulty breathing\\nscenario.covid_symptoms.filter(item => [0, 1, 2].includes(item.index)).length === 1\",\"designer\":{\"xLocation\":2380,\"yLocation\":2400,\"reverse\":false,\"next\":\"0090f60e9b77-168818111a75e5cf-b501\"},\"label\":\"1 COV\",\"targetStepId\":\"9585ad505092-b7a594ac89f7fe4e-998f\"},{\"id\":\"b2c1f7dba02d-0a63a7e863134977-9a69\",\"type\":\"branch\",\"condition\":\"// check if they have selected two primary covid symptoms: cough, fever, or mild or moderate difficulty breathing\\nscenario.covid_symptoms.filter(item => [0, 1, 2].includes(item.index)).length > 1\",\"designer\":{\"xLocation\":2634,\"yLocation\":2300,\"reverse\":false,\"next\":\"60c21cd4c525-3b87b161b61a52ca-053d\"},\"label\":\"2+ COV\",\"targetStepId\":\"3d0858a70b5c-a489a5ab3e787e10-b6d2\"},{\"id\":\"5a251f9949fc-07ddc0924a4bc234-1f8d\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":2240,\"yLocation\":2580,\"listStyle\":3,\"next\":\"7fa833c52dda-4be7c8569d7c9260-584f\"},\"text\":\"scenario.questions.ltcf_question\",\"variable\":\"nursing_home\",\"stringId\":\"stringId_6950303aa5771bf6\",\"choiceType\":\"choice\",\"label\":\"LTCF\"},{\"id\":\"7fa833c52dda-4be7c8569d7c9260-584f\",\"type\":\"branch\",\"condition\":\"scenario.nursing_home.index == 0\",\"designer\":{\"xLocation\":2253,\"yLocation\":2640,\"next\":\"c60562d85789-2c7780dfc39aa5a6-95f6\",\"reverse\":false},\"targetStepId\":\"324cb0d50daf-a1b7b7544a1eb2fa-ca5b\",\"label\":\"LTCF\"},{\"id\":\"7570684c5969-0132044bfe08c0d9-8210\",\"type\":\"statement\",\"designer\":{\"xLocation\":2380,\"yLocation\":3565},\"text\":\"scenario.messages.msg7\",\"stringId\":\"stringId_305f095d602dc049\",\"label\":\"MSG 7\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 7   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"c60562d85789-2c7780dfc39aa5a6-95f6\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":2113,\"yLocation\":2760,\"listStyle\":3,\"next\":\"c3a1bbcde05a-5dc745d81188a9c7-8c72\"},\"text\":\"scenario.questions.hcf_question\",\"variable\":\"healthcare_facility\",\"stringId\":\"stringId_9edc1014ee39ef54\",\"choiceType\":\"choice\",\"label\":\"HCF\"},{\"id\":\"bbab55cb8459-a1ee45206842434a-ac0c\",\"type\":\"prompt\",\"dataType\":\"scenario.symptom_lists.comorbidity.text\",\"designer\":{\"xLocation\":2153,\"yLocation\":2980,\"listStyle\":5,\"next\":\"1e347b27262f-795095a3d00b85ad-8914\"},\"text\":\"scenario.questions.risk_factor_question\",\"variable\":\"risk_factors\",\"label\":\"Risk factors\",\"stringId\":\"stringId_a924ffbaf0f34a48\",\"choiceType\":\"multi-choice\",\"submitTitle\":\"scenario.dictionary.submit_button\"},{\"id\":\"c3a1bbcde05a-5dc745d81188a9c7-8c72\",\"type\":\"branch\",\"condition\":\"scenario.healthcare_facility.index == 0\",\"designer\":{\"xLocation\":2113,\"yLocation\":2840,\"next\":\"bbab55cb8459-a1ee45206842434a-ac0c\",\"reverse\":true},\"targetStepId\":\"94e6b1047834-5f10a34e1ee23c70-90f6\",\"label\":\"HCF\"},{\"id\":\"d839f5ffdf41-cc1936ceedd9d3e9-50e6\",\"type\":\"statement\",\"designer\":{\"xLocation\":1920,\"yLocation\":3571,\"next\":\"a6258bf78fb0-96df791f69968870-9578\"},\"text\":\"scenario.messages.msg8\",\"stringId\":\"stringId_6995cde5c604d98c\",\"label\":\"MSG 8\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 8 \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"a6258bf78fb0-96df791f69968870-9578\",\"type\":\"statement\",\"designer\":{\"xLocation\":1920,\"yLocation\":3640,\"next\":\"067facb56961-fcdaecc6a8ae355d-456b\"},\"text\":\"scenario.messages.msg6\",\"stringId\":\"stringId_3158d563b01a12c3\",\"label\":\"MSG 6\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 6  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"067facb56961-fcdaecc6a8ae355d-456b\",\"type\":\"statement\",\"designer\":{\"xLocation\":1920,\"yLocation\":3700},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_49d4580ee0fa09b3\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t2\\\"\\n}\",\"label\":\"MSG T2\"},{\"id\":\"1e347b27262f-795095a3d00b85ad-8914\",\"type\":\"assignVariable\",\"designer\":{\"xLocation\":2153,\"yLocation\":3040,\"next\":\"f5ce0ce890a7-5617c382719d6f5e-7a51\"},\"scope\":\"scenario\",\"operation\":\"incrementBy\",\"variable\":\"prompt_count_risk\",\"value\":\"1\"},{\"id\":\"f5ce0ce890a7-5617c382719d6f5e-7a51\",\"type\":\"branch\",\"condition\":\"scenario.risk_factors.length == 0\",\"designer\":{\"xLocation\":2160,\"yLocation\":3108,\"reverse\":false,\"next\":\"aff3aa5d5f1f-176cefa621658b6f-e0a0\"},\"label\":\"0 sel\",\"targetStepId\":\"5fd05e1d07fe-de1f827a41ad6f3d-85eb\"},{\"id\":\"5fd05e1d07fe-de1f827a41ad6f3d-85eb\",\"type\":\"branch\",\"condition\":\"scenario.prompt_count_risk > 2\",\"designer\":{\"xLocation\":2233,\"yLocation\":3168,\"reverse\":false,\"next\":\"a384a4b85ee3-2b46871c1cec5790-3fec\"},\"label\":\"CNT > 3\",\"targetStepId\":\"4e65aab498d2-d2467427e054c7fe-7f37\"},{\"id\":\"a384a4b85ee3-2b46871c1cec5790-3fec\",\"type\":\"statement\",\"designer\":{\"xLocation\":2240,\"yLocation\":3040,\"next\":\"bbab55cb8459-a1ee45206842434a-ac0c\"},\"text\":\"scenario.messages.continue_msg\",\"stringId\":\"stringId_bece3b6d0e3716d9\",\"label\":\"CONT\"},{\"id\":\"02eb8dc98fb9-4e275e63a56a1b19-3932\",\"type\":\"statement\",\"designer\":{\"xLocation\":2293,\"yLocation\":3566},\"text\":\"scenario.messages.msg0\",\"stringId\":\"stringId_8044c8a964a344b5\",\"label\":\"MSG 0\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 0   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"aff3aa5d5f1f-176cefa621658b6f-e0a0\",\"type\":\"branch\",\"condition\":\"scenario.risk_factors.length !== 1 || scenario.risk_factors[0].index !== (scenario.symptom_lists.comorbidity.text.length - 1)\",\"designer\":{\"xLocation\":2080,\"yLocation\":3200,\"next\":\"998b79eecedc-aad9fbbc8d8eea37-6e5e\",\"reverse\":true},\"label\":\"RISK\",\"targetStepId\":\"a3fe29c271fa-580901351d6234ad-944e\"},{\"id\":\"307003dcdfc2-fb86bd15d032448c-6c60\",\"type\":\"statement\",\"designer\":{\"xLocation\":2033,\"yLocation\":3580,\"next\":\"c9c8ea71780f-6baaa20873099823-8270\"},\"text\":\"scenario.messages.msg9\",\"stringId\":\"stringId_e214b3eb992e4908\",\"label\":\"MSG 9\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 9   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"998b79eecedc-aad9fbbc8d8eea37-6e5e\",\"type\":\"branch\",\"condition\":\"[9,10,11].includes(scenario.age.index) \",\"designer\":{\"xLocation\":2140,\"yLocation\":3280,\"next\":\"9a116069bf9f-5947f73e0f7c3036-e8a3\",\"reverse\":true},\"label\":\"> 65\",\"targetStepId\":\"a3fe29c271fa-580901351d6234ad-944e\"},{\"id\":\"537b955a6e8d-cac688aa0abd075a-5ec4\",\"type\":\"statement\",\"designer\":{\"xLocation\":2180,\"yLocation\":3566,\"next\":\"b3965f3e406b-b7ba9283f09729d3-8b3b\"},\"text\":\"scenario.messages.msg8\",\"stringId\":\"stringId_5f12f04af81d5168\",\"label\":\"MSG 8\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 8  \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"1aee8fc7a32b-e03f1c277b079f40-c61c\",\"type\":\"statement\",\"designer\":{\"xLocation\":2480,\"yLocation\":3686},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_ae5eb3d477945a09\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t2\\\"\\n}\",\"label\":\"MSG T2\"},{\"id\":\"5bff4692086d-a8c8e97f0b581855-21f2\",\"type\":\"branch\",\"condition\":\"scenario.risk_factors.length !== 1 || scenario.risk_factors[0].index !== (scenario.symptom_lists.comorbidity.text.length - 1)\",\"designer\":{\"xLocation\":2693,\"yLocation\":3280,\"reverse\":true,\"next\":\"b1866c7ba04b-2c1d7be182296554-49eb\"},\"label\":\"RISK\",\"targetStepId\":\"46e42d0d0f6f-bf5e887d1c01a0ce-1ef1\"},{\"id\":\"926a696c9fa6-26d4419d59c7c7f2-926b\",\"type\":\"statement\",\"designer\":{\"xLocation\":2600,\"yLocation\":3640},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_49d4580ee0fa09b3\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 't2'\\n}\",\"label\":\"MSG T2\"},{\"id\":\"3b9bb00750bd-502d0db7cb1587d7-75f2\",\"type\":\"statement\",\"designer\":{\"xLocation\":2753,\"yLocation\":3560,\"next\":\"4639a58ca42b-e1ee7c0ef3a681a8-74d2\"},\"text\":\"scenario.messages.msg8\",\"stringId\":\"stringId_a81d5c53a3499119\",\"label\":\"MSG 8\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 8   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"3503dd49eb60-5736a207bcc8b4cd-3292\",\"type\":\"statement\",\"designer\":{\"xLocation\":3080,\"yLocation\":3674},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_7b557a385ca317d8\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t2\\\"\\n}\",\"label\":\"MSG T2\"},{\"id\":\"e8856bcbed8c-8f1313d0491026e6-e307\",\"type\":\"statement\",\"designer\":{\"xLocation\":3331,\"yLocation\":3610},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_0da04dade1914d07\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t2\\\"\\n}\",\"label\":\"MSG T2\"},{\"id\":\"c5a6fb5535d7-9440600e87e60a22-1f38\",\"type\":\"statement\",\"designer\":{\"xLocation\":3200,\"yLocation\":3600},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_d13c52722395f28b\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t2\\\"\\n}\",\"label\":\"MSG T2\"},{\"id\":\"631e459f560a-03d82868e0b007e7-f4c0\",\"type\":\"action\",\"label\":\"MSG 4\",\"designer\":{\"xLocation\":1600,\"yLocation\":760,\"next\":\"2cf19d506d0f-69c50e88b22b0ffd-2a36\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg4']\"},{\"id\":\"88c4e04d3104-7308b12280ada799-d3b8\",\"type\":\"action\",\"label\":\"MSG 0\",\"designer\":{\"xLocation\":1932,\"yLocation\":1920,\"next\":\"c1bb9b0b0718-bec16574638c14a2-63b6\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg0']\"},{\"id\":\"d11e09e6ca63-45491e4d834c924c-fbd4\",\"type\":\"action\",\"label\":\"MSG 7\",\"designer\":{\"xLocation\":752,\"yLocation\":3385,\"next\":\"f3e1fe546bb0-1bf5687a79ae3f76-4563\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg7']\"},{\"id\":\"324cb0d50daf-a1b7b7544a1eb2fa-ca5b\",\"type\":\"action\",\"label\":\"MSG 7\",\"designer\":{\"xLocation\":2393,\"yLocation\":3400,\"next\":\"3160d3dcf601-860bb25a4d0753fa-4146\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg7']\"},{\"id\":\"01a78be15af1-e293c18d1693e7b2-daef\",\"type\":\"action\",\"label\":\"MSG 7\",\"designer\":{\"xLocation\":3620,\"yLocation\":3380,\"next\":\"f873d6b7093c-abafd8f334559208-5470\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg7']\"},{\"id\":\"630179408ae4-a39be06855eb07c7-0112\",\"type\":\"action\",\"label\":\"MSG 9,6,T2\",\"designer\":{\"xLocation\":200,\"yLocation\":3367,\"next\":\"a9c35071b840-ff2c48db3757aa11-90c7\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg9', 'msg6']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"400dfc442f20-c155be96322b2a5e-09e1\",\"type\":\"action\",\"label\":\"MSG 5,T2\",\"designer\":{\"xLocation\":289,\"yLocation\":3375,\"next\":\"09637cc5d7c5-d0ef5eaa1f47ba0d-957c\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg5']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"9f2ce6d914e3-e5f3fb85440a85ff-36e3\",\"type\":\"action\",\"label\":\"MSG 8,T2\",\"designer\":{\"xLocation\":400,\"yLocation\":3375,\"next\":\"e814312be304-0cd1d19c3016cd43-51a6\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg8']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"ad6b9490df2a-b67f2d01498fc80e-bf31\",\"type\":\"action\",\"label\":\"MSG 9,T2\",\"designer\":{\"xLocation\":540,\"yLocation\":3385,\"next\":\"57964a2ec004-9f20c6d59847bfd3-4fc9\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg9']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"fba7e05cf3a0-a7293c1416745eca-e9e0\",\"type\":\"action\",\"label\":\"MSG 0\",\"designer\":{\"xLocation\":651,\"yLocation\":3385,\"next\":\"46ee3b03e00a-79b41a6c4621cc0c-35ba\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg0']\"},{\"id\":\"530fbe9c9d90-7cfe3c6339c748ee-cd53\",\"type\":\"action\",\"label\":\"MSG 8,6,T2\",\"designer\":{\"xLocation\":892,\"yLocation\":3385,\"next\":\"61a7524ab794-7aec5e0ad10966e3-0287\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg8', 'msg6']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"71516eac92a7-6a32e83c1cfaaa6c-afe0\",\"type\":\"action\",\"label\":\"MSG 9,T2\",\"designer\":{\"xLocation\":1020,\"yLocation\":3387,\"next\":\"0a6b13cc113f-1cb7e597233bdfdd-0336\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg9']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"4656af61998b-8b5ec1daf9185bfd-e1dc\",\"type\":\"action\",\"label\":\"MSG 0\",\"designer\":{\"xLocation\":1395,\"yLocation\":3400,\"next\":\"4aa1efeba5cd-273beb15b6ee9949-e09c\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg0']\"},{\"id\":\"22ad4e1b9b10-b6499d64e54f4cce-d5d3\",\"type\":\"action\",\"label\":\"MSG 8,T2\",\"designer\":{\"xLocation\":1275,\"yLocation\":3400,\"next\":\"5cc790e3a7fd-2ad1393e729e6935-b62f\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg8']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"2809edaa4099-a87f0d4f6bb2a8e3-31c1\",\"type\":\"action\",\"label\":\"MSG 9,T2\",\"designer\":{\"xLocation\":1135,\"yLocation\":3387,\"next\":\"0a6b13cc113f-1cb7e597233bdfdd-0336\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg9']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"94e6b1047834-5f10a34e1ee23c70-90f6\",\"type\":\"action\",\"label\":\"MSG 8,6,T2\",\"designer\":{\"xLocation\":1920,\"yLocation\":3400,\"next\":\"9c4eb6b0fb78-0c1e439957b2f132-784d\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg8', 'msg6']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"4e65aab498d2-d2467427e054c7fe-7f37\",\"type\":\"action\",\"label\":\"MSG 0\",\"designer\":{\"xLocation\":2300,\"yLocation\":3400,\"next\":\"1fb741ff82f8-b807a2601ee1bb45-23f1\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg0']\"},{\"id\":\"a3fe29c271fa-580901351d6234ad-944e\",\"type\":\"action\",\"label\":\"MSG 9,T2\",\"designer\":{\"xLocation\":2040,\"yLocation\":3400,\"next\":\"716504fc5535-969cca72e6a08b30-55bc\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg9']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"9a116069bf9f-5947f73e0f7c3036-e8a3\",\"type\":\"action\",\"label\":\"MSG 8,T2\",\"designer\":{\"xLocation\":2193,\"yLocation\":3400,\"next\":\"6c4fe28c776a-ea42cd5c174f7312-0fe0\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg8']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"64777325f7ac-b0a0a9b16e05514e-eee4\",\"type\":\"action\",\"label\":\"MSG 8,6,T2\",\"designer\":{\"xLocation\":2493,\"yLocation\":3400,\"next\":\"ec7a5fdfa43a-207414b44d0c5d60-d29c\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg8', 'msg6']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"9d88be7eeb74-b93730d79cd4fd0a-d6ea\",\"type\":\"action\",\"label\":\"MSG 0\",\"designer\":{\"xLocation\":2893,\"yLocation\":3400,\"next\":\"633c4eaf56af-15929fb91837cfaa-67be\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg0']\"},{\"id\":\"46e42d0d0f6f-bf5e887d1c01a0ce-1ef1\",\"type\":\"action\",\"label\":\"MSG 5,T2\",\"designer\":{\"xLocation\":2600,\"yLocation\":3400,\"next\":\"11825bf4028d-c980af4beb1d74f7-c4e5\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg5']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"b1866c7ba04b-2c1d7be182296554-49eb\",\"type\":\"action\",\"label\":\"MSG 8,T2\",\"designer\":{\"xLocation\":2760,\"yLocation\":3400,\"next\":\"799cd7ad8034-e9201baeae0d6d69-e421\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg8']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"9529191be6cb-9e9f158eaddeb03c-758f\",\"type\":\"action\",\"label\":\"MSG 0\",\"designer\":{\"xLocation\":3471,\"yLocation\":3380,\"next\":\"44be2570fd13-e39342ef017f8d37-9a19\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg0']\"},{\"id\":\"d6d18cc3ecde-95ccacd6a00731ab-f5b5\",\"type\":\"action\",\"label\":\"MSG 9,6,T2\",\"designer\":{\"xLocation\":3073,\"yLocation\":3400,\"next\":\"d52cf91940ca-cd30168a9c389d67-8d81\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg9', 'msg6']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"2b1dc45b8f98-d6e22bd29cfa66a1-0040\",\"type\":\"action\",\"label\":\"MSG 9,T2\",\"designer\":{\"xLocation\":3189,\"yLocation\":3387,\"next\":\"b4342e6adf4f-f8f0650f896d8098-0777\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg9']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"b2e59e6838f4-1b554c097afc81dd-1e50\",\"type\":\"action\",\"label\":\"MSG 8,T2\",\"designer\":{\"xLocation\":3340,\"yLocation\":3380,\"next\":\"0a80b8b069b0-bd9abdd3152f7f84-ff93\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg8']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"6c24f1f1d714-cb25977852676488-20d6\",\"type\":\"action\",\"label\":\"DICT\",\"designer\":{\"xLocation\":1492,\"yLocation\":71,\"next\":\"470e1708d3fa-931c321326faa759-74c8\"},\"onInit\":\"scenario.dictionary = {\\n\\n  comorbidity: {\\n    chronic_lung: customLocalizedStrings[\\\"CDC/comorbidity/chronic_lung\\\"],\\n    serious_heart: customLocalizedStrings[\\\"CDC/comorbidity/serious_heart\\\"],\\n    weak_immune: customLocalizedStrings[\\\"CDC/comorbidity/weak_immune\\\"],\\n    pregnancy: customLocalizedStrings[\\\"CDC/comorbidity/pregnancy\\\"],\\n    severe_obesity: customLocalizedStrings[\\\"CDC/comorbidity/severe_obesity\\\"],\\n    underlying_conditions: customLocalizedStrings[\\\"CDC/comorbidity/underlying_conditions\\\"],\\n    none_of_above: customLocalizedStrings[\\\"CDC/comorbidity/none_of_above\\\"],\\n  },\\n\\n  covid_symptoms: {\\n    fever: customLocalizedStrings[\\\"CDC/covid_symptoms/fever\\\"],\\n    cough: customLocalizedStrings[\\\"CDC/covid_symptoms/cough\\\"],\\n    mild_mod_breathing: customLocalizedStrings[\\\"CDC/covid_symptoms/mild_mod_breathing\\\"],\\n    sore_throat: customLocalizedStrings[\\\"CDC/covid_symptoms/sore_throat\\\"],\\n    muscle_aches: customLocalizedStrings[\\\"CDC/covid_symptoms/muscle_aches\\\"],\\n    vomiting: customLocalizedStrings[\\\"CDC/covid_symptoms/vomiting\\\"],\\n    new_loss_taste_smell: customLocalizedStrings[\\\"CDC/covid_symptoms/new_loss_taste_smell\\\"],\\n    other_symptoms: customLocalizedStrings[\\\"CDC/covid_symptoms/other_symptoms\\\"]\\n  },\\n\\n  submit_button: customLocalizedStrings[\\\"CDC/submit_button\\\"],\\n  \\n  responses: {\\n    disclaimer_response: customLocalizedStrings[\\\"CDC/disclaimer_response\\\"],\\n    yes_no_response: customLocalizedStrings[\\\"CDC/yes_no_response\\\"],\\n    location_response: customLocalizedStrings[\\\"CDC/location_response\\\"],\\n    location_error: customLocalizedStrings[\\\"CDC/location_error\\\"],\\n    who_for_response: customLocalizedStrings[\\\"CDC/who_for_response\\\"],\\n    age_response: customLocalizedStrings[\\\"CDC/age_response\\\"],\\n    gender_response: customLocalizedStrings[\\\"CDC/gender_response\\\"],\\n    yes_no_idk_response: customLocalizedStrings[\\\"CDC/yes_no_idk_response\\\"],\\n    yes_or_idk_no_response: customLocalizedStrings[\\\"CDC/yes_or_idk_no_response\\\"]\\n  },\\n\\n  other_questions: {\\n    location_question: customLocalizedStrings[\\\"CDC/location_question\\\"],\\n    state_question: customLocalizedStrings[\\\"CDC/state_question\\\"],\\n    who_for_question: customLocalizedStrings[\\\"CDC/who_for_question\\\"]\\n  },\\n  \\n  second_person_questions: {\\n    check_box_question: customLocalizedStrings[\\\"CDC/second_person_questions/check_box_question\\\"],\\n    ppe: customLocalizedStrings[\\\"CDC/second_person_questions/ppe\\\"],\\n    hcf_short: customLocalizedStrings[\\\"CDC/second_person_questions/hcf_short\\\"],\\n    close_contact: customLocalizedStrings[\\\"CDC/second_person_questions/close_contact\\\"],\\n    ltcf_question: customLocalizedStrings[\\\"CDC/second_person_questions/ltcf_question\\\"],\\n    hcf_question: customLocalizedStrings[\\\"CDC/second_person_questions/hcf_question\\\"],\\n    gender_question: customLocalizedStrings[\\\"CDC/second_person_questions/gender_question\\\"],\\n    risk_factor_question: customLocalizedStrings[\\\"CDC/second_person_questions/risk_factor_question\\\"],\\n    exposure_question: customLocalizedStrings[\\\"CDC/second_person_questions/exposure_question\\\"],\\n    is_ill_question: customLocalizedStrings[\\\"CDC/second_person_questions/is_ill_question\\\"],\\n    age_question: customLocalizedStrings[\\\"CDC/second_person_questions/age_question\\\"],\\n    life_threat_question: customLocalizedStrings[\\\"CDC/second_person_questions/life_threat_question\\\"]\\n  },\\n\\n  third_person_questions: {\\n    check_box_question: customLocalizedStrings[\\\"CDC/third_person_questions/check_box_question\\\"],\\n    ppe: customLocalizedStrings[\\\"CDC/third_person_questions/ppe\\\"],\\n    hcf_short: customLocalizedStrings[\\\"CDC/third_person_questions/hcf_short\\\"],\\n    close_contact: customLocalizedStrings[\\\"CDC/third_person_questions/close_contact\\\"],\\n    ltcf_question: customLocalizedStrings[\\\"CDC/third_person_questions/ltcf_question\\\"],\\n    hcf_question: customLocalizedStrings[\\\"CDC/third_person_questions/hcf_question\\\"],\\n    gender_question: customLocalizedStrings[\\\"CDC/third_person_questions/gender_question\\\"],\\n    risk_factor_question: customLocalizedStrings[\\\"CDC/third_person_questions/risk_factor_question\\\"],\\n    exposure_question: customLocalizedStrings[\\\"CDC/third_person_questions/exposure_question\\\"],\\n    is_ill_question: customLocalizedStrings[\\\"CDC/third_person_questions/is_ill_question\\\"],\\n    age_question: customLocalizedStrings[\\\"CDC/third_person_questions/age_question\\\"],\\n    life_threat_question: customLocalizedStrings[\\\"CDC/third_person_questions/life_threat_question\\\"]\\n  }\\n}\\n\\nscenario.messages = {\\n  disclaimer_msg: customLocalizedStrings[\\\"CDC/messages/disclaimer_msg\\\"],\\n  decline_msg: customLocalizedStrings[\\\"CDC/messages/decline_msg\\\"],\\n  intro_msg: customLocalizedStrings[\\\"CDC/messages/intro_msg\\\"],\\n  instruct_msg: customLocalizedStrings[\\\"CDC/messages/instruct_msg\\\"],\\n  continue_msg: customLocalizedStrings[\\\"CDC/messages/continue_msg\\\"],\\n\\n  msg0: customLocalizedStrings[\\\"CDC/messages/msg0\\\"],\\n  msg1: customLocalizedStrings[\\\"CDC/messages/msg1\\\"],\\n  msg2: customLocalizedStrings[\\\"CDC/messages/msg2\\\"],\\n  msg3: customLocalizedStrings[\\\"CDC/messages/msg3\\\"],\\n  msg4: customLocalizedStrings[\\\"CDC/messages/msg4\\\"],\\n  msg5: customLocalizedStrings[\\\"CDC/messages/msg5\\\"],\\n  msg6: customLocalizedStrings[\\\"CDC/messages/msg6\\\"],\\n  msg7: customLocalizedStrings[\\\"CDC/messages/msg7\\\"],\\n  msg8: customLocalizedStrings[\\\"CDC/messages/msg8\\\"],\\n  \\n  msg9: customLocalizedStrings[\\\"CDC/messages/msg9\\\"],  \\n  msg10: customLocalizedStrings[\\\"CDC/messages/msg10\\\"],\\n  msg11: customLocalizedStrings[\\\"CDC/messages/msg11\\\"],\\n  msg12: customLocalizedStrings[\\\"CDC/messages/msg12\\\"],\\n  \\n  msg13a: customLocalizedStrings[\\\"CDC/messages/msg13a\\\"],\\n  msg13b: customLocalizedStrings[\\\"CDC/messages/msg13b\\\"],\\n\\n  local_a: customLocalizedStrings[\\\"CDC/messages/local_a\\\"],\\n  local_b: customLocalizedStrings[\\\"CDC/messages/local_b\\\"],\\n  local_c: customLocalizedStrings[\\\"CDC/messages/local_c\\\"],\\n\\n  msg14: customLocalizedStrings[\\\"CDC/messages/msg14\\\"],\\n  msg15: customLocalizedStrings[\\\"CDC/messages/msg15\\\"],\\n  msg16: customLocalizedStrings[\\\"CDC/messages/msg16\\\"],\\n  msg17: customLocalizedStrings[\\\"CDC/messages/msg17\\\"],\\n  msg18: customLocalizedStrings[\\\"CDC/messages/msg18\\\"],\\n\\n  t0: customLocalizedStrings[\\\"CDC/messages/t0\\\"],\\n  t1: customLocalizedStrings[\\\"CDC/messages/t1\\\"],\\n  t2: customLocalizedStrings[\\\"CDC/messages/t2\\\"]\\n}\"},{\"id\":\"470e1708d3fa-931c321326faa759-74c8\",\"type\":\"action\",\"label\":\"Index Lookup\",\"designer\":{\"xLocation\":1492,\"yLocation\":140,\"next\":\"7eef451e2b1f-933e216491b678ee-b493\"},\"onInit\":\"scenario.index_lookup = {\\n  ages: {\\n    lt_2: 0,\\n    two_4: 1,\\n    five_9: 2,\\n    ten_18: 3,\\n    nineteen_29: 4,\\n    thirty_39: 5,\\n    forty_49: 6,\\n    fifty_59: 7,\\n    sixty_64: 8,\\n    sixty_five_69: 9,\\n    seventy_79: 10,\\n    eighty_plus: 11,\\n    under_18: 12,\\n    eighteen_29: 13\\n  },\\n  emer_911_symptoms: {\\n    no_life_threat: 0,\\n    gasping_for_air: 1,\\n    blue_lips: 2,\\n    pain_chest: 3,\\n    dizziness: 4,\\n    confused: 5,\\n    unconscious: 6,\\n    slurred_speech: 7,\\n    new_seizures: 8,\\n    shallow_breathing: 9,\\n    not_waking: 10,\\n    irritable: 11,\\n    seizures: 12\\n  },\\n  ed_symptoms: {\\n    mod_sev_breathing: 0,\\n    coughing_blood: 1,\\n    low_bp: 2,\\n    retractions: 3,\\n    dehydration: 4,\\n    low_bp_cold: 6,\\n    none_of_above: 5\\n  },\\n  comorbidity: {\\n    chronic_lung: 0,\\n    serious_heart: 1,\\n    weak_immune: 2,\\n    pregnancy: 3,\\n    severe_obesity: 4,\\n    underlying_conditions: 5,\\n    none_of_above: 6\\n  },\\n  covid_symptoms: {\\n    fever: 0,\\n    shortness_of_breath: 1,\\n    cough: 2,\\n    other: 3,\\n    sore_throat: 4,\\n    muscle_aches: 5,\\n    vomiting: 6,\\n    other_symptoms: 7,\\n    change_in_smell: 8,\\n    mild_mod_breathing: 9,\\n    new_loss_taste_smell: 10\\n  },\\n  other_symptoms: {\\n    runny_nose: 0,\\n    sore_throat: 1,\\n    muscle_head_aches: 2,\\n    tiredness: 3,\\n    nausea_vomiting: 4,\\n    other: 5\\n  },\\n  breathing_symptoms: { severe: 0, mild: 1, no_trouble: 2 }\\n}\"},{\"id\":\"3ff7a441ad34-c612c94dd7e9939f-80ba\",\"type\":\"action\",\"label\":\"Questions\",\"designer\":{\"xLocation\":1492,\"yLocation\":520,\"next\":\"009e2508dfac-c061679b902ee763-98b0\"},\"onInit\":\"scenario.questions = scenario.who_for.index === 0 ? scenario.dictionary.second_person_questions : scenario.dictionary.third_person_questions\"},{\"id\":\"34c2a7f807a3-920d1f619990a213-7bcf\",\"type\":\"action\",\"label\":\"Risk List\",\"designer\":{\"xLocation\":1805,\"yLocation\":1492,\"next\":\"785747110df4-215c0057004e2a60-1be6\"},\"onInit\":\"// If Male or >60, remove 'Pregnancy' from list of comorbidities\\nif ([8, 9, 10, 11].includes(scenario.age.index) || scenario.gender.index === 0) {\\n    scenario.symptom_lists.comorbidity.text.splice(5, 1)\\n    scenario.symptom_lists.comorbidity.indices.splice(5, 1)\\n}\"},{\"id\":\"f30af41c6b88-8e3d6f9c2435bd8f-67e0\",\"type\":\"branch\",\"condition\":\"scenario.is_ill.index === 0\",\"designer\":{\"xLocation\":1370,\"yLocation\":1300,\"next\":\"9d060d1ffafc-957c3ed4933d9a65-4e75\"},\"label\":\"IS ILL\",\"targetStepId\":\"e89609c80709-2801ccb7086470e6-fe47\"},{\"id\":\"e7538c5f2f64-5b74292356d5d5ff-3701\",\"type\":\"action\",\"label\":\"MSG 3\",\"designer\":{\"xLocation\":1632,\"yLocation\":1120,\"next\":\"7c911b4b28f0-ca9287d362a3ff4f-37c4\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg3']\"},{\"id\":\"9d060d1ffafc-957c3ed4933d9a65-4e75\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_idk_response\",\"designer\":{\"xLocation\":772,\"yLocation\":1400,\"listStyle\":3,\"next\":\"b697a8bb4151-0f6de812d4113628-1dfa\"},\"text\":\"scenario.questions.close_contact\",\"variable\":\"close_contact\",\"submitTitle\":\"Submit\",\"label\":\"CONTACT\",\"stringId\":\"stringId_9043aa1fa6da1af6\",\"choiceType\":\"choice\"},{\"id\":\"b697a8bb4151-0f6de812d4113628-1dfa\",\"type\":\"branch\",\"condition\":\"scenario.close_contact.index === 0 || scenario.close_contact.index === 2\",\"designer\":{\"xLocation\":780,\"yLocation\":1480,\"next\":\"db85e959de4a-095c9794d480ecf4-098f\",\"reverse\":true},\"label\":\"CONT\",\"targetStepId\":\"db8a2255b4a3-52ade096a9f40e81-10ed\"},{\"id\":\"db85e959de4a-095c9794d480ecf4-098f\",\"type\":\"action\",\"label\":\"MSG 1,16,T0\",\"designer\":{\"xLocation\":792,\"yLocation\":2080,\"next\":\"2fc08a482800-3c053eb653e01124-0182\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg1', 'msg16']\\nscenario.test_message_outcome = 't0'\"},{\"id\":\"db8a2255b4a3-52ade096a9f40e81-10ed\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":650,\"yLocation\":1569,\"listStyle\":3,\"next\":\"941024ef1f46-f8840944e4cf34c6-3d9a\"},\"text\":\"scenario.questions.ltcf_question\",\"variable\":\"nursing_home\",\"stringId\":\"stringId_6950303aa5771bf6\",\"choiceType\":\"choice\",\"label\":\"LTCF\"},{\"id\":\"7f7ef06c8547-b6c7f6138143559a-6eb0\",\"type\":\"action\",\"label\":\"MSG 18,14,T0\",\"designer\":{\"xLocation\":652,\"yLocation\":2080,\"next\":\"fb8bcee9ccc7-083507667cb4cb20-145f\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg18', 'msg14']\\nscenario.test_message_outcome = 't0'\"},{\"id\":\"941024ef1f46-f8840944e4cf34c6-3d9a\",\"type\":\"branch\",\"condition\":\"scenario.nursing_home.index == 0\",\"designer\":{\"xLocation\":660,\"yLocation\":1649,\"next\":\"64862271a67e-d21f38864f53f609-d897\",\"reverse\":false},\"targetStepId\":\"7f7ef06c8547-b6c7f6138143559a-6eb0\",\"label\":\"LTCF\"},{\"id\":\"64862271a67e-d21f38864f53f609-d897\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":392,\"yLocation\":1709,\"listStyle\":3,\"next\":\"f3eeab17a998-ef5da27e9f750ed4-ed40\"},\"text\":\"scenario.questions.hcf_short\",\"variable\":\"healthcare_facility\",\"submitTitle\":\"Submit\",\"stringId\":\"stringId_6ddc7495fbe98862\",\"choiceType\":\"choice\",\"label\":\"HCF\"},{\"id\":\"8d10794c40d4-7edf89a55344d46a-0798\",\"type\":\"action\",\"label\":\"MSG 18,T0\",\"designer\":{\"xLocation\":512,\"yLocation\":2080,\"next\":\"5355c957201c-26e0bc9ccee77119-4126\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg18']\\nscenario.test_message_outcome = 't0'\"},{\"id\":\"f3eeab17a998-ef5da27e9f750ed4-ed40\",\"type\":\"branch\",\"condition\":\"scenario.healthcare_facility.index == 0\",\"designer\":{\"xLocation\":400,\"yLocation\":1775,\"next\":\"8d10794c40d4-7edf89a55344d46a-0798\",\"reverse\":true},\"targetStepId\":\"d32ee740e30b-39a5de70cb0a975a-362a\",\"label\":\"HCF\"},{\"id\":\"d32ee740e30b-39a5de70cb0a975a-362a\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":306,\"yLocation\":1875,\"listStyle\":3,\"next\":\"69753e712f15-89ec63366d3e967d-8e27\"},\"text\":\"scenario.questions.ppe\",\"variable\":\"ppe\",\"submitTitle\":\"Submit\",\"label\":\"PPE\",\"stringId\":\"stringId_6a482dd8696ddc14\",\"choiceType\":\"choice\"},{\"id\":\"69753e712f15-89ec63366d3e967d-8e27\",\"type\":\"branch\",\"condition\":\"scenario.ppe.index === 0\",\"designer\":{\"xLocation\":305,\"yLocation\":1960,\"reverse\":true,\"next\":\"7dcddb345aed-f08f8b48db989a34-ecad\"},\"label\":\"PPE\",\"targetStepId\":\"c53e97c437d1-0abb129f975822b6-e396\"},{\"id\":\"c53e97c437d1-0abb129f975822b6-e396\",\"type\":\"action\",\"label\":\"MSG 17,T2\",\"designer\":{\"xLocation\":205,\"yLocation\":2080,\"next\":\"e6a067f7dbcd-51e38f4cd88ffd10-b9bb\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg17']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"7dcddb345aed-f08f8b48db989a34-ecad\",\"type\":\"action\",\"label\":\"MSG 15,T2\",\"designer\":{\"xLocation\":380,\"yLocation\":2080,\"next\":\"6fb7352ca3f4-1c268423ebca2419-250e\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg15']\\nscenario.test_message_outcome = 't2'\"},{\"id\":\"f243ffaa68d4-d845c04c3da99b37-7cd1\",\"type\":\"statement\",\"designer\":{\"xLocation\":645,\"yLocation\":2228,\"next\":\"019ebd156662-5be3ff0b7b3d43ad-3f59\"},\"text\":\"scenario.messages.msg18\",\"stringId\":\"stringId_2dd24651d8da933c\",\"label\":\"MSG 18\",\"visible\":\"scenario.show_message\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 18\\n}\"},{\"id\":\"019ebd156662-5be3ff0b7b3d43ad-3f59\",\"type\":\"statement\",\"designer\":{\"xLocation\":645,\"yLocation\":2288,\"next\":\"779f018bef3e-4c9f467b4b35a1e9-6efd\"},\"text\":\"scenario.messages.msg14\",\"stringId\":\"stringId_b99bdaa88b4236f0\",\"label\":\"MSG 14\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 14\\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"779f018bef3e-4c9f467b4b35a1e9-6efd\",\"type\":\"statement\",\"designer\":{\"xLocation\":645,\"yLocation\":2348},\"text\":\"scenario.messages.t0\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_7bdc906e39182623\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t0\\\"\\n}\",\"label\":\"MSG T0\"},{\"id\":\"35216f90081d-7b58f76fcadadfc1-a386\",\"type\":\"statement\",\"designer\":{\"xLocation\":505,\"yLocation\":2225,\"next\":\"580a30686daf-de03003b9e8820f4-1133\"},\"text\":\"scenario.messages.msg18\",\"stringId\":\"stringId_2dd24651d8da933c\",\"label\":\"MSG 18\",\"visible\":\"scenario.show_message\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 18\\n}\"},{\"id\":\"580a30686daf-de03003b9e8820f4-1133\",\"type\":\"statement\",\"designer\":{\"xLocation\":505,\"yLocation\":2280},\"text\":\"scenario.messages.t0\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_7bdc906e39182623\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t0\\\"\\n}\",\"label\":\"MSG T0\"},{\"id\":\"38ec9f44947b-e090884b5c52ecff-70c3\",\"type\":\"statement\",\"designer\":{\"xLocation\":372,\"yLocation\":2220,\"next\":\"02bc441c773f-a8e349e0ef9e5e78-d35f\"},\"text\":\"scenario.messages.msg15\",\"stringId\":\"stringId_6ae49269a022e64f\",\"label\":\"MSG 15\",\"visible\":\"scenario.show_message\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 15\\n}\"},{\"id\":\"02bc441c773f-a8e349e0ef9e5e78-d35f\",\"type\":\"statement\",\"designer\":{\"xLocation\":371,\"yLocation\":2280},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_05043b703025e68c\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 't2'\\n}\",\"label\":\"MSG T2\"},{\"id\":\"a57231d07911-b89b9c40c0f5f03f-088b\",\"type\":\"statement\",\"designer\":{\"xLocation\":200,\"yLocation\":2280},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_05043b703025e68c\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 't2'\\n}\",\"label\":\"MSG T2\"},{\"id\":\"6015c7180a6d-c405f678d972f36a-1986\",\"type\":\"statement\",\"designer\":{\"xLocation\":200,\"yLocation\":2230,\"next\":\"a57231d07911-b89b9c40c0f5f03f-088b\"},\"text\":\"scenario.messages.msg17\",\"stringId\":\"stringId_f5b5123afb027bb1\",\"label\":\"MSG 17\",\"visible\":\"scenario.show_message\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 17\\n}\"},{\"id\":\"185c435c440e-1caac41c76d00bb8-bc30\",\"type\":\"statement\",\"designer\":{\"xLocation\":785,\"yLocation\":2340},\"text\":\"scenario.messages.t0\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_7bdc906e39182623\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t0\\\"\\n}\",\"label\":\"MSG T0\"},{\"id\":\"6c90788425bc-632f6c5ba608522b-608b\",\"type\":\"statement\",\"designer\":{\"xLocation\":785,\"yLocation\":2229,\"next\":\"a1f84ee31218-7f0cbac7b02d80f7-6ccd\"},\"text\":\"scenario.messages.msg1\",\"stringId\":\"stringId_8cbbe79a43aeefbb\",\"label\":\"MSG 1\",\"visible\":\"scenario.show_message\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 1\\n}\"},{\"id\":\"a1f84ee31218-7f0cbac7b02d80f7-6ccd\",\"type\":\"statement\",\"designer\":{\"xLocation\":785,\"yLocation\":2280,\"next\":\"185c435c440e-1caac41c76d00bb8-bc30\"},\"text\":\"scenario.messages.msg16\",\"label\":\"MSG 16\",\"stringId\":\"stringId_92d8d6b1bac7169b\",\"visible\":\"scenario.show_message\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 16\\n}\"},{\"id\":\"51fa800d0200-206a9462217da236-d1b5\",\"type\":\"statement\",\"designer\":{\"xLocation\":1626,\"yLocation\":1272},\"text\":\"scenario.messages.msg3\",\"stringId\":\"stringId_712a8ad272e85bfa\",\"label\":\"MSG 3\",\"visible\":\"scenario.show_message\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 3\\n}\"},{\"id\":\"c9c8ea71780f-6baaa20873099823-8270\",\"type\":\"statement\",\"designer\":{\"xLocation\":2033,\"yLocation\":3640},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_48f596570a22a559\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 't2'\\n}\",\"label\":\"MSG T2\"},{\"id\":\"4639a58ca42b-e1ee7c0ef3a681a8-74d2\",\"type\":\"statement\",\"designer\":{\"xLocation\":2753,\"yLocation\":3640},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_49d4580ee0fa09b3\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 't2'\\n}\",\"label\":\"MSG T2\"},{\"id\":\"faf265f6cffc-22852bbec8b9acd3-cc05\",\"type\":\"branch\",\"condition\":\"// check if they have chosen a secondary covid symptom that is not \\\"other symptoms\\\"\\nscenario.covid_symptoms.filter(item => item.index !== 7).length > 0\",\"designer\":{\"xLocation\":1215,\"yLocation\":2489,\"reverse\":true,\"next\":\"c9c25969d3f2-b28279f57d44c7fb-3122\"},\"label\":\"SEC COVID\",\"targetStepId\":\"573f09484e35-6d1c0847d574d4be-fbaf\"},{\"id\":\"9aa11e56b732-9eebf03435d8b063-577b\",\"type\":\"statement\",\"designer\":{\"xLocation\":1709,\"yLocation\":3580,\"next\":\"dcdaaffb3386-e0b38eee38aaea8f-b468\"},\"text\":\"scenario.messages.msg10\",\"stringId\":\"stringId_c7405ff463405130\",\"label\":\"MSG 10\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 10   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"c9c25969d3f2-b28279f57d44c7fb-3122\",\"type\":\"action\",\"label\":\"MSG 10,T0\",\"designer\":{\"xLocation\":1711,\"yLocation\":3407,\"next\":\"a4ad7fbd6a97-cefdebcab5ed5b2a-04c4\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg10']\\nscenario.test_message_outcome = 't0'\"},{\"id\":\"0090f60e9b77-168818111a75e5cf-b501\",\"type\":\"branch\",\"condition\":\"// check if they have chosen a secondary covid symptom that is not \\\"other symptoms\\\"\\nscenario.covid_symptoms.filter(item => item.index !== 7).length > 0\",\"designer\":{\"xLocation\":2120,\"yLocation\":2480,\"reverse\":false,\"next\":\"c9c25969d3f2-b28279f57d44c7fb-3122\"},\"label\":\"SEC COVID\",\"targetStepId\":\"5a251f9949fc-07ddc0924a4bc234-1f8d\"},{\"id\":\"7c911b4b28f0-ca9287d362a3ff4f-37c4\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":1632,\"yLocation\":1192,\"next\":\"51fa800d0200-206a9462217da236-d1b5\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"2fc08a482800-3c053eb653e01124-0182\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":792,\"yLocation\":2160,\"next\":\"6c90788425bc-632f6c5ba608522b-608b\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"fb8bcee9ccc7-083507667cb4cb20-145f\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":652,\"yLocation\":2160,\"next\":\"f243ffaa68d4-d845c04c3da99b37-7cd1\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"5355c957201c-26e0bc9ccee77119-4126\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":513,\"yLocation\":2160,\"next\":\"35216f90081d-7b58f76fcadadfc1-a386\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"6fb7352ca3f4-1c268423ebca2419-250e\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":380,\"yLocation\":2150,\"next\":\"38ec9f44947b-e090884b5c52ecff-70c3\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"e6a067f7dbcd-51e38f4cd88ffd10-b9bb\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":207,\"yLocation\":2160,\"next\":\"6015c7180a6d-c405f678d972f36a-1986\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"2cf19d506d0f-69c50e88b22b0ffd-2a36\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":1600,\"yLocation\":840,\"next\":\"dfc0e87b51ad-db48170c06d27397-bca2\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"a4ad7fbd6a97-cefdebcab5ed5b2a-04c4\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":1713,\"yLocation\":3480,\"next\":\"9aa11e56b732-9eebf03435d8b063-577b\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"4aa1efeba5cd-273beb15b6ee9949-e09c\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":1395,\"yLocation\":3480,\"next\":\"e6a35ba7078a-cc440f896b14fbb4-b982\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"f3e1fe546bb0-1bf5687a79ae3f76-4563\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":751,\"yLocation\":3465,\"next\":\"5c50811ee2a7-b3b0aab1e37fc102-0107\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"0a6b13cc113f-1cb7e597233bdfdd-0336\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":1080,\"yLocation\":3469,\"next\":\"bac2deb4feac-262fa7d74cc56181-07a1\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"5cc790e3a7fd-2ad1393e729e6935-b62f\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":1275,\"yLocation\":3480,\"next\":\"18c23789346f-947e740f03a875e8-ce20\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"61a7524ab794-7aec5e0ad10966e3-0287\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":892,\"yLocation\":3465,\"next\":\"753fcda3042c-34874f085149a441-202a\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"46ee3b03e00a-79b41a6c4621cc0c-35ba\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":647,\"yLocation\":3469,\"next\":\"18c1d760c40f-af4400e0fa0b76bc-891d\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"57964a2ec004-9f20c6d59847bfd3-4fc9\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":540,\"yLocation\":3465,\"next\":\"0730220ca29a-0278d37a0379001c-8889\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"e814312be304-0cd1d19c3016cd43-51a6\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":400,\"yLocation\":3460,\"next\":\"1ad03c4a8891-7486b59aa78864c7-b03b\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"09637cc5d7c5-d0ef5eaa1f47ba0d-957c\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":293,\"yLocation\":3460,\"next\":\"345a28beada8-a43221b4a9d92f10-4380\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"a9c35071b840-ff2c48db3757aa11-90c7\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":200,\"yLocation\":3455,\"next\":\"cc8d764e6d19-364d6f8c3f237b15-f6c3\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"c1bb9b0b0718-bec16574638c14a2-63b6\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":1934,\"yLocation\":2000,\"next\":\"42c9a3e45475-5ac6bae29aa09197-403e\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"9c4eb6b0fb78-0c1e439957b2f132-784d\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":1920,\"yLocation\":3480,\"next\":\"d839f5ffdf41-cc1936ceedd9d3e9-50e6\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"716504fc5535-969cca72e6a08b30-55bc\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":2040,\"yLocation\":3480,\"next\":\"307003dcdfc2-fb86bd15d032448c-6c60\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"6c4fe28c776a-ea42cd5c174f7312-0fe0\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":2189,\"yLocation\":3480,\"next\":\"537b955a6e8d-cac688aa0abd075a-5ec4\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"1fb741ff82f8-b807a2601ee1bb45-23f1\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":2300,\"yLocation\":3480,\"next\":\"02eb8dc98fb9-4e275e63a56a1b19-3932\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"3160d3dcf601-860bb25a4d0753fa-4146\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":2388,\"yLocation\":3480,\"next\":\"7570684c5969-0132044bfe08c0d9-8210\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"ec7a5fdfa43a-207414b44d0c5d60-d29c\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":2488,\"yLocation\":3480,\"next\":\"517f17d75e79-8f4a8818358989f5-36e8\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"633c4eaf56af-15929fb91837cfaa-67be\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":2893,\"yLocation\":3480,\"next\":\"bc51d1c84af2-d728490455496151-12d4\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"11825bf4028d-c980af4beb1d74f7-c4e5\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":2600,\"yLocation\":3480,\"next\":\"9d9080dc9744-ce645812f47d91a2-4314\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"799cd7ad8034-e9201baeae0d6d69-e421\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":2760,\"yLocation\":3480,\"next\":\"3b9bb00750bd-502d0db7cb1587d7-75f2\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"44be2570fd13-e39342ef017f8d37-9a19\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":3475,\"yLocation\":3460,\"next\":\"b40edbcb8e70-dc2a03fa62964a90-6d07\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"f873d6b7093c-abafd8f334559208-5470\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":3620,\"yLocation\":3460,\"next\":\"38a461e086f7-cc03c9068c518cfb-6bbe\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"d52cf91940ca-cd30168a9c389d67-8d81\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":3073,\"yLocation\":3471,\"next\":\"eb31b2c11479-6f3ac6eae56eba73-b437\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"b4342e6adf4f-f8f0650f896d8098-0777\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":3191,\"yLocation\":3467,\"next\":\"6b2cdf4ecac0-d0428f2388050853-14e8\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"0a80b8b069b0-bd9abdd3152f7f84-ff93\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":3340,\"yLocation\":3460,\"next\":\"6b922f1f04b6-9d2caacb98e5626f-15e4\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"b181a58bee11-863da5a06832f8b7-6729\",\"type\":\"action\",\"label\":\"AGES\",\"designer\":{\"xLocation\":1493,\"yLocation\":300,\"next\":\"59b4208a606e-223fffc90059907b-c78a\"},\"onInit\":\"scenario.age_list = [\\n  'under_18',\\n  'eighteen_29',\\n  'thirty_39',\\n  'forty_49',\\n  'fifty_59',\\n  'sixty_64',\\n  'sixty_five_69',\\n  'seventy_79',\\n  'eighty_plus'\\n]\\n\\nconst ages = scenario.dictionary.responses.age_response.map((age, i) => ({ value: i, title: age }))\\nscenario.dictionary.age_dropdown_list = [\\n    { value: 'default_message', title: customLocalizedStrings[\\\"CDC/Please_select_an_age\\\"] },\\n    ...ages\\n]\"},{\"id\":\"73efa88fc0e3-7ade266e1640ef25-cc8d\",\"type\":\"assignVariable\",\"designer\":{\"xLocation\":1372,\"yLocation\":814,\"next\":\"4d30c16b6f3c-d9f7a923a621cbfa-cb87\"},\"scope\":\"scenario\",\"operation\":\"incrementBy\",\"label\":\"prompt count\",\"variable\":\"prompt_count_age\",\"value\":\"1\"},{\"id\":\"4d30c16b6f3c-d9f7a923a621cbfa-cb87\",\"type\":\"branch\",\"condition\":\"scenario.age_choice.choice !== 'default_message'\",\"designer\":{\"xLocation\":1380,\"yLocation\":880,\"next\":\"1155de40a24b-79f2c15f2faba8cc-e30a\"},\"label\":\"SEL\",\"targetStepId\":\"44fb46395ddc-25bf8c13c30eea25-926d\"},{\"id\":\"44fb46395ddc-25bf8c13c30eea25-926d\",\"type\":\"action\",\"label\":\"SET AGES\",\"designer\":{\"xLocation\":1454,\"yLocation\":973,\"next\":\"33b1596c59b0-2ba178906bb14cfd-b16f\"},\"onInit\":\"const indexChoice = parseInt(scenario.age_choice.choice)\\nconst age_key = scenario.age_list[indexChoice]\\nscenario.age = {\\n    index: scenario.index_lookup.ages[age_key],\\n    entity: scenario.dictionary.responses.age_response[indexChoice]\\n}\"},{\"id\":\"1155de40a24b-79f2c15f2faba8cc-e30a\",\"type\":\"branch\",\"condition\":\"scenario.prompt_count_age > 2\",\"designer\":{\"xLocation\":1320,\"yLocation\":940,\"next\":\"6dca57d01884-4b5a93cb76a775c3-aab8\",\"reverse\":true},\"label\":\"CNT = 3\",\"targetStepId\":\"28fca0c0690a-5b7211963358d94a-a519\"},{\"id\":\"6dca57d01884-4b5a93cb76a775c3-aab8\",\"type\":\"statement\",\"designer\":{\"xLocation\":1287,\"yLocation\":814,\"next\":\"43e0724ff748-08e8e63e80e659e0-d226\"},\"text\":\"scenario.messages.continue_msg\",\"label\":\"CONT\",\"stringId\":\"stringId_fc98c4c88c8a482c\"},{\"id\":\"28fca0c0690a-5b7211963358d94a-a519\",\"type\":\"action\",\"label\":\"MSG 0\",\"designer\":{\"xLocation\":1231,\"yLocation\":1034,\"next\":\"ae0c88400e23-56c62ecff7fe8c4a-67bc\"},\"onInit\":\"scenario.core_scenario_outcomes = ['msg0']\"},{\"id\":\"ae0c88400e23-56c62ecff7fe8c4a-67bc\",\"type\":\"action\",\"label\":\"Outcome\",\"designer\":{\"xLocation\":1231,\"yLocation\":1114,\"next\":\"41a6161098f6-0484e769e9a193c2-1632\"},\"onInit\":\"// store the contents of the conversation\\nconst core_scenario_data = {\\n    is_ill: scenario.is_ill || null,\\n    who_for: scenario.who_for || null,\\n    age: scenario.age || null,\\n    gender: scenario.gender || null,\\n    life_threat: scenario.life_threat || null,\\n    cov19_contact: scenario.cov19_contact || null,\\n    covid_symptoms: scenario.covid_symptoms\\n        ? scenario.covid_symptoms.map(sym => ({ index: scenario.symptom_lists.COV_symptoms.indices[sym.index], entity: sym.entity }))\\n        : null,\\n    comorbidity: scenario.risk_factors\\n        ? scenario.risk_factors.map(risk => ({ index: scenario.symptom_lists.comorbidity.indices[risk.index], entity: risk.entity }))\\n        : null,\\n    nursing_home: scenario.nursing_home || null,\\n    healthcare_facility: scenario.healthcare_facility || null,\\n    ppe: scenario.ppe || null,\\n    close_contact: scenario.close_contact || null,\\n    covid_other_symptoms: null,\\n    ed_symptoms: null,\\n    _911_symptoms: null,\\n    breathing_symptoms: null\\n}\\n\\nconversation.core_outcome = {\\n    core_scenario_outcomes: scenario.test_message_outcome ? [...scenario.core_scenario_outcomes, scenario.test_message_outcome] : scenario.core_scenario_outcomes,\\n    core_scenario_data\\n}\\n\\nconst log_outcome = {\\n    message_outcome: scenario.core_scenario_outcomes.map(outcome => outcome.replace(/msg/, 'MSG ')),\\n    test_message_outcome: scenario.test_message_outcome ? 'MSG ' + scenario.test_message_outcome.toUpperCase() : null,\\n    version: scenario.version,\\n    core_scenario_data\\n}\\n\\nsession.logCustomEvent('CDC_CORE_OUTCOME', log_outcome)\\n\\n// we need to trigger an outcome event for the messages before the last one\\nlet mToOutcome = log_outcome.message_outcome.slice()\\n\\n// if there is not a testing message outcome then the last message in the message_outcome array\\n// is the last message and will automatically be logged so we don't need to log that again so\\n// we remove it\\nif (!scenario.test_message_outcome) {\\n  mToOutcome.pop() \\n}\\n\\n// trigger outcome event so they show up in the built-in telemetry\\nfor (let outcome of mToOutcome) {\\n  session.logOutcomeEvent(outcome)\\n}\"},{\"id\":\"41a6161098f6-0484e769e9a193c2-1632\",\"type\":\"statement\",\"designer\":{\"xLocation\":1227,\"yLocation\":1200},\"text\":\"scenario.messages.msg0\",\"stringId\":\"stringId_8044c8a964a344b5\",\"label\":\"MSG 0\",\"entity\":\"{\\n name: \\\"completion_event\\\",\\n message_id: 0   \\n}\",\"visible\":\"scenario.show_message\"},{\"id\":\"009e2508dfac-c061679b902ee763-98b0\",\"type\":\"prompt\",\"dataType\":\"scenario.dictionary.responses.yes_no_response\",\"designer\":{\"xLocation\":1486,\"yLocation\":600,\"listStyle\":3,\"next\":\"a16da1198685-b9aaea79ad2f13b9-4d02\"},\"text\":\"scenario.questions.life_threat_question\",\"variable\":\"life_threat\",\"stringId\":\"stringId_4d064ea244c6a142\",\"choiceType\":\"choice\",\"label\":\"LIFE THREAT\"},{\"id\":\"a16da1198685-b9aaea79ad2f13b9-4d02\",\"type\":\"branch\",\"condition\":\"scenario.life_threat.index === 0\",\"designer\":{\"xLocation\":1492,\"yLocation\":660,\"next\":\"43e0724ff748-08e8e63e80e659e0-d226\"},\"label\":\"URG\",\"targetStepId\":\"631e459f560a-03d82868e0b007e7-f4c0\"},{\"id\":\"dcdaaffb3386-e0b38eee38aaea8f-b468\",\"type\":\"statement\",\"designer\":{\"xLocation\":1706,\"yLocation\":3640},\"text\":\"scenario.messages.t0\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_7bdc906e39182623\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t0\\\"\\n}\",\"label\":\"MSG T0\"},{\"id\":\"522c0ec833f2-0fa01b87b00be42f-2c9a\",\"type\":\"statement\",\"designer\":{\"xLocation\":389,\"yLocation\":3615},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_9bde9b2463bc9fac\",\"entity\":\"{\\n  name: \\\"completion_event\\\",\\n  message_id: \\\"t2\\\"\\n}\",\"label\":\"MSG T2\"},{\"id\":\"49488c9f0be6-fae2700e29c3cc0b-78f5\",\"type\":\"statement\",\"designer\":{\"xLocation\":1269,\"yLocation\":3627},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_48f596570a22a559\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 't2'\\n}\",\"label\":\"MSG T2\"},{\"id\":\"b3965f3e406b-b7ba9283f09729d3-8b3b\",\"type\":\"statement\",\"designer\":{\"xLocation\":2180,\"yLocation\":3640},\"text\":\"scenario.messages.t2\",\"visible\":\"scenario.show_message\",\"stringId\":\"stringId_48f596570a22a559\",\"entity\":\"{\\n  name: 'completion_event',\\n  message_id: 't2'\\n}\",\"label\":\"MSG T2\"},{\"id\":\"c938a93b1329-1bb58f9f76f339e1-e154\",\"type\":\"branch\",\"condition\":\"scenario.healthcare_facility.index == 0\",\"designer\":{\"xLocation\":3270,\"yLocation\":2774,\"reverse\":true,\"next\":\"2b857538b615-fad6e8224dcf52bc-523d\"},\"targetStepId\":\"d6d18cc3ecde-95ccacd6a00731ab-f5b5\",\"label\":\"HCF\"},{\"id\":\"810c09e3ee8d-f9bfbf12c15b0689-2ec4\",\"type\":\"branch\",\"condition\":\"[9,10,11].includes(scenario.age.index) \",\"designer\":{\"xLocation\":3289,\"yLocation\":3240,\"next\":\"b2e59e6838f4-1b554c097afc81dd-1e50\",\"reverse\":true},\"label\":\"> 65\",\"targetStepId\":\"2b1dc45b8f98-d6e22bd29cfa66a1-0040\"}],\"interrupting\":false,\"breaking\":false,\"returningMessage\":\"Let's resume the COVID-19 assessment\"}"
}